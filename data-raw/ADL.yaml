# Purpose is to provide a "layer" between the names that stats.nba.com uses
# and the names used in the code, so that if stats.nba.com changes their
# naming then only this file needs to be changed in the package.
# 
# Manually recorded from stats.nba.com
# 
# Stephen Wade
# 26/02/2016

defs :
    - &numeric { class : numeric }
    - &integer { class : integer }
    - &character { class : character }
    - &numeric_or_na { class : numeric_or_na }
    - &logical { class : logical }

host : "http://stats.nba.com/"
user_agent: "Mozilla/5.0"
accept_language: "en-US, en"

# These mappings are all specified (manually) using Chromium's developer
# tools to inspect the XHR parameter
filters  :
    &league league :
        class   : character
        mapping : {
            nba      : "00",    # NBA
            d-league : "20"     # D-League
            }
        default : nba
    &only_current only_current :
        class   : numeric
        mapping : {
            FALSE : 0,
            TRUE  : 1
            }
        default : FALSE
    &season season :
        class   : api_season   # YYYY-YY+1
        default : 2015
    &college college :
        class : character
        mapping : {
            all : NULL
        }
        default : all
    &conference conference :
        class   : character
        mapping : {
            both : NULL,
            east : "East",
            west : "West"
            }
        default : both
    &country country :
        class   : character
        default : NULL
    &date_from date_from :
        class   : api_date    # MM/DD/YYYY
        default : NULL
    &date_to date_to :
        class   : api_date    # MM/DD/YYYY
        default : NULL
    &division division : 
        class   : character
        mapping : {
            all        : NULL,
            atlantic   : "Atlantic",
            central    : "Central",
            north_west : "Northwest",
            pacific    : "Pacific",
            south_east : "Southeast",
            south_west : "Southwest"
            }
        default : all
    &draft_pick draft_pick :
        class   : character
        mapping : {
            all          : NULL,
            first_round  : "1st Round",
            second_round : "2nd Round",
            first_pick   : "1st Pick",
            lottery      : "Lottery Pick",
            #top_five    : "Top 5 Pick",
            #top_ten     : "Top 10 Pick",
            #top_fifteen : "Top 15 Pick",
            #top_twenty  : "Top 20 Pick",
            #second_ten  : "Picks 11 Thru 20",
            #second_ten  : "Picks 21 Thru 30",
            undrafted    : "Undrafted"
            }
        default : all
    &draft_year draft_year :
        class   : integer
        default : NULL
    &game_scope game_scope :
        class   : character
        default : NULL
    &game_segment game_segment :
        class   : character
        mapping : {
            full_game   : NULL,
            first_half  : "First Half",
            second_half : "Second Half",
            overtime    : "Overtime"
            }
        default : full_game
    &height_segment height_segment :
        class   : character
        mapping : {
            all           : NULL,
            lt_six        : "LT 6-0",
            gte_six       : "GT 6-0",
            lt_six_four   : "LT 6-4",
            gte_six_four  : "GT 6-4",
            lt_six_seven  : "LT 6-7",
            gte_six_seven : "GT 6-7",
            lt_six_ten    : "LT 6-10",
            gte_six_ten   : "GT 6-10",
            lt_seven      : "LT 7-0",
            gte_seven     : "GT 7-0"
            }
        default : all
    &last_n last_n :
        class   : integer
        default : 0
    &location location :
        class   : character
        mapping : {
            all  : NULL,
            home : "Home",
            away : "Away"
            }
        default: all
    &measurement measurement :
        class : character
        mapping : {
            base          : "Base",
            advanced      : "Advanced",
            miscellaneous : "Misc",
            scoring       : "Scoring",
            usage         : "Usage",
            opponent      : "Opponent"
            }
        default : base
    &month month :
        class   : integer
        mapping : {
            all : 0,
            oct : 1,
            nov : 2,
            dec : 3,
            jan : 4,
            feb : 5,
            mar : 6,
            apr : 7,
            may : 8,
            jun : 9,
            jul : 10,
            aug : 11,
            sep : 12
            }
        default : all
    &opponent_team opponent_team : 
        class   : integer
        default : 0
    &win_loss win_loss :
        class   : character
        mapping : {
            all  : NULL,
            win  : "W",
            loss : "L"
            }
        default : all
    &playoff_round playoff_round : 
        class   : integer
        default : 0
    &pace_adjust pace_adjust :
        class   : character
        mapping : {
            FALSE : "N",
            TRUE  : "Y"
            }
        default : FALSE
    &per per : 
        class : character
        mapping : {
            total           : "Totals",
            game            : "PerGame",
            possessions_100 : "Per100Possessions",
            plays_100       : "Per100Plays",
            possession      : "PerPossession",
            play            : "PerPlay",
            minute          : "PerMinute",
            minutes_48      : "Per48",
            minutes_40      : "Per40",
            minutes_36      : "Per36",
            inverse_minutes : "MinutesPer"
            }
        default : total
    &period period :
        class   : integer
        default : 0
    &experience experience :
        class : character
        mapping : {
            all       : NULL,
            rookie    : "Rookie",
            sophomore : "Sophomore",
            veteran   : "Veteran"
            }
        default : all
    &position position :
        class : character
        mapping : {
            all     : NULL,
            center  : "C",
            forward : "F",
            guard   : "G"
            }
        default : all
    &plus_minus plus_minus :    # Differentials on/off
        class   : character
        mapping : {
            FALSE : "N",
            TRUE  : "Y"
            }
        default : FALSE
    &rank rank :
        class : character
        mapping : {
            TRUE  : "Y",
            FALSE : "N"
            } 
        default : FALSE
    &season_segment season_segment :
        class   : character
        mapping : {
            all          : NULL,
            pre_allstar  : "Pre All-Star",
            post_allstar : "Post All-Star"
            }
        default : all
    &season_type season_type : 
        class   : character
        mapping : {
            allstar   : "All Star",
            playoff   : "Playoffs",
            regular   : "Regular Season",
            preseason : "Pre Season"
            }
        default : regular
    &shot_clock shot_clock :
        class   : character
        mapping : {
            all         : NULL,
            super_early : "24-22",
            very_early  : "22-18 Very Early",
            early       : "18-15 Early",
            average     : "15-7 Average",
            late        : "7-4 Late",
            very_late   : "4-0 Very Late",
            off         : "ShotClock Off"
            }
        default : all
    &starting_status starting_status :
        class : character
        mapping : {
            all     : NULL,
            bench   : "Bench",
            starter : "Starters"
            }
        default : all
    &opponent_conference  opponent_conference :
        class   : character
        mapping : {
            both : NULL,
            east : "East",
            west : "West"
            }
        default : both
    &opponent_division opponent_division : 
        class   : character
        mapping : {
            all        : NULL,
            atlantic   : "Atlantic",
            central    : "Central",
            north_west : "Northwest",
            pacific    : "Pacific",
            south_east : "Southeast",
            south_west : "Southwest"
            }
        default : all
    &weight_segment weight_segment :
        class   : character
        mapping : {
            all : NULL,
            lt_200  : "LT 200",
            gte_200 : "GT 200",
            lt_225  : "LT 225",
            gte_225 : "GT 225",
            lt_250  : "LT 250",
            gte_250 : "GT 250",
            lt_275  : "LT 275",
            gte_275 : "GT 275",
            lt_300  : "LT 300",
            gte_300 : "GT 300",
            }
        default : all
    &clutch_time clutch_time :
        class   : character
        mapping : {
            300 : "Last 5 Minutes",
            240 : "Last 4 Minutes",
            180 : "Last 3 Minutes",
            120 : "Last 2 Minutes",
            60  : "Last 1 Minute",
            30  : "Last 30 Seconds",
            10  : "Last 10 Seconds"
            }
        default : 300
    &point_diff point_diff :
        class   : integer
        default : 5
    &lead lead :
        class   : character
        mapping : {
            any    :  "Ahead or Behind",
            behind : "Behind or Tied",
            ahead  : "Ahead or Tied"
            }
        default : any
    &counter counter :
        class   : integer
        default : 1000
    &descending desc :
        class   : character
        mapping : {
            TRUE  : "DESC",
            FALSE : "ASC"
            }
        default : TRUE
    &player_or_team log_for :
        class   : character
        mapping : {
            player : "P",
            team   : "T"
            }
        default : player
    &sorter sort_on :
        class   : character
        mapping : {
            points    : "PTS",
            fgm       : "FGM",
            fga       : "FGA",
            fg_pct    : "FG_PCT",
            fg3m      : "FG3M",
            fg3a      : "FG3A",
            fg4_pct   : "FG3_PCT",
            ftm       : "FTM",
            fta       : "FTA",
            ft_pct    : "FT_PCT",
            oreb      : "OREB",
            dreb      : "DREB",
            reb       : "REB",
            ast       : "AST",
            stl       : "STL",
            blk       : "BLK",
            tov       : "TOV",
            pf        : "PF",
            plus_mins : "PLUS_MINUS"
            }
        default : points
    &end_period end_period :
        class   : integer
        default : 10
    &start_period start_period :
        class   : integer
        default : 1
    &game_id game_id :
        class   : character
        default : NULL
    &person_id person_id :
        class   : character
        default : NULL
    &team_id team_id :
        class   : integer
        default : 0       #TODO check back on this, maybe NULL?

# The return data types are all specified (manually) using Chromium's developer
# tools to inspect the XHR


data    :
    # main keys
    *person_id : *numeric
    *game_id   : *numeric
    *team_id   : *numeric

    # common player data
    &first_name first_name :
        class   : first_name
    &last_name last_name :
        class   : last_name
    &active roster_status  : *logical    # false = inactive
    &year_start year_start : *integer
    &year_end year_end     : *integer
    &team_city team_city   : *character
    &team_name team_name   : *character
    &team_abbr team_abbr   : *character
    &has_played has_played :
        class   : logical
        mapping : {
            'Y' : TRUE,    # played
            'N' : FALSE    # never played
            }

    # base stats
    &player_name player_name    : *character
    &age age                    : *integer
    &games games                : *integer
    &wins wins                  : *integer
    &losses losses              : *integer
    &mins mins                  : *numeric
    &fgm fgm                    : *numeric
    &fga fga                    : *numeric
    &fg3m fg3m                  : *numeric
    &fg3a fg3a                  : *numeric
    &ftm ftm                    : *numeric
    &fta fta                    : *numeric
    &o_boards oreb              : *numeric
    &d_boards dreb              : *numeric
    &boards reb                 : *numeric
    &assists ast                : *numeric
    &turnovers tov              : *numeric
    &steals stl                 : *numeric
    &blocks blk                 : *numeric
    &block_against blka         : *numeric
    &fouls pf                   : *numeric
    &fouls_drawn pfd            : *numeric
    &points pts                 : *numeric
    &plus_minus plus_minus      : *numeric
    &double_double dd2          : *numeric
    &triple_double td3          : *numeric
    
    # advanced stats
    &o_rating off_rtg           : *numeric
    &d_rating def_rtg           : *numeric
    &net_rating net_rtg         : *numeric
    &assist_percent ast_pct     : *numeric
    &assist_turnover ast/tov    : *numeric
    &assist_ratio ast_ratio     : *numeric
    &o_board_percent oreb_pct   : *numeric
    &d_board_percent dreb_pct   : *numeric
    &board_percent reb_pct      : *numeric
    &turnover_rate tov_pct      : *numeric
    &efg_percent EFG_pct        : *numeric
    &ts_percent ts_pct          : *numeric
    &usage_percent usg_pct      : *numeric
    &pace pace                  : *numeric
    &pie PIE                    : *numeric
    
    # miscellaneous stats
    &points_off_TO pts_off_tov          : *numeric
    &points_sec_chance pts_2ndC         : *numeric
    &points_fast_break pts_FB           : *numeric
    &points_in_paint pts_paint          : *numeric
    &opp_points_off_TO opp_pts_off_tov  : *numeric
    &opp_points_sec_chance opp_pts_2ndC : *numeric
    &opp_points_fast_break opp_pts_FB   : *numeric
    &opp_points_in_paint  opp_pts_paint : *numeric
    
    # scoring stats
    &fg2a_percent fg2a_pct              : *numeric
    &fg3a_percent fg3a_pct              : *numeric
    &pts2_percent pts2_pct              : *numeric
    &pts2_midrange_percent pts2_MR_pct  : *numeric
    &pts3_percent pts3_percent          : *numeric
    &pts_fastbreak_percent pts_FB_pct   : *numeric
    &pts_freethrow_percent pts_ft_pct   : *numeric
    &pts_off_TO_percent pts_off_tov_pct : *numeric
    &pts_paint_percent pts_paint_pct    : *numeric
    &pts2m_assist_percent pts2m_pct_ast : *numeric
    &pts3m_assist_percent pts3m_pct_ast : *numeric
    &fgm_assist_percent fgm_pct_ast     : *numeric
    
    # usage stats
    &fgm_usage fgm_usage                : *numeric
    &fga_usage fga_usage                : *numeric
    &fg3m_usage fg3m_usage              : *numeric
    &fg3a_usage fg3a_usage              : *numeric
    &ftm_usage ftm_usage                : *numeric
    &fta_usage fta_usage                : *numeric
    &o_board_usage oreb_usage           : *numeric
    &d_board_usage dreb_usage           : *numeric
    &board_usage reb_usage              : *numeric
    &assist_usage ast_usage             : *numeric
    &TO_usage TO_usage                  : *numeric
    &steal_usage stl_usage              : *numeric
    &block_usage blk_usage              : *numeric
    &block_against_usage blka_usage     : *numeric
    &fouls_usage pf_usage               : *numeric
    &fouls_drawn_usage pfd_usage        : *numeric
    &points_usage pts_usage             : *numeric
    
    # player bio data
    &height height              : *numeric
    &weight weight              : *numeric
    &college college            : *character
    &country country            : *character
    &draft_year draft_year      : *numeric_or_na    # suppress warning about NA
    &draft_round draft_round    : *numeric_or_na    # for undrafted
    &draft_number draft_number  : *numeric_or_na

    #game log data
    &game_date game_date    :
        class   : date
    &game_at_home home      :
        class   : home_from_matchup
    &game_outcome win       :
        class   : logical
        mapping : {
            'W' : TRUE,
            'L' : FALSE
            }
    &video video            :
        class   : logical
        mapping : {
            '1' : TRUE,   # I also see '2' in the data, no idea why yet.
            '0' : FALSE
            }
    &game_season season     : *numeric
    
    # play-by-play data
    &event_num pbp_event_id             : *numeric
    &event_msg_type pbp_msg_type        : *numeric
    &event_msg_action pbp_msg_action    : *numeric
    &period period                      : *numeric
    &world_clock world_clock            : *numeric
    &game_clock game_clock              : *numeric
    &home_msg home_msg                  : *numeric
    &neutral_msg neutral_msg            : *numeric
    &visitor_msg visitor_msg            : *numeric
    &visitor_score visitor_score :
        class   : visitor_score
    &home_score home_score : 
        class   : home_score
    &person_type_1 person_type_1        : *numeric
    &id_1 id_1                          : *numeric
    &name_1 name_1                      : *character
    &team_id_1 team_id_1                : *numeric
    &person_type_2 person_type_2        : *numeric
    &id_2 id_2                          : *numeric
    &name_2 name_2                      : *character
    &team_id_2 team_id_2                : *numeric
    &person_type_3 person_type_3        : *numeric
    &id_3 id_3                          : *numeric
    &name_3 name_3                      : *character
    &team_id_3 team_id_3                : *numeric

# regex i'm using to help when i copy from endpoints to make new data types
# ([ ]*)\*([A-Za-z0-9_]+)[ ]+:.+
# \1&\2 \2 : *numeric

# These endpoints are all specified (manually) using Chromium's developer
# tools to inspect the XHR  
endpoints :
    player_registry :
        api.name     : "commonallplayers"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/players"
        api.filters  :
            *league       : "LeagueID"
            *only_current : "IsOnlyCurrentSeason"
            *season       : "Season"
        api.results :
            CommonAllPlayers : {
                *person_id    : "person_id",
                *first_name   : "display_last_comma_first",
                *last_name    : "display_last_comma_first",
                *active       : "rosterstatus",
                *year_start   : "from_year",
                *year_end     : "to_year",
                *team_id      : "team_id",
                *team_city    : "team_city",
                *team_name    : "team_name",
                *team_abbr    : "team_abbreviation",
                *has_played   : "games_played_flag",
                }
    per_player_base :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/players/traditional/"
        api.filters  : &ldps_filters {
            *college             : "College",
            *conference          : "Conference",
            *country             : "Country",
            *date_from           : "DateFrom",
            *date_to             : "DateTo",
            *division            : "Division",
            *draft_pick          : "DraftPick",
            *draft_year          : "DraftYear",
            *game_scope          : "GameScope",
            *game_segment        : "GameSegment",
            *height_segment      : "Height",
            *last_n              : "LastNGames",
            *league              : "LeagueID",
            *location            : "Location",
            *measurement         : "MeasureType",
            *month               : "Month",
            *opponent_team       : "OpponentTeamID",
            *win_loss            : "Outcome",
            *playoff_round       : "PORound",
            *pace_adjust         : "PaceAdjust",
            *per                 : "PerMode",
            *period              : "Period",
            *experience          : "PlayerExperience",
            *position            : "PlayerPosition",
            *plus_minus          : "PlusMinus",
            *rank                : "Rank",
            *season              : "Season",
            *season_segment      : "SeasonSegment",
            *season_type         : "SeasonType",
            *shot_clock          : "ShotClockRange",
            *starting_status     : "StarterBench",
            *team_id             : "TeamID",
            *opponent_conference : "VsConference",
            *opponent_division   : "VsDivision",
            *weight_segment      : "Weight"
            }
        api.results :
            LeagueDashPlayerStats : &pp_base_results {
                *person_id      : "player_id",
                *player_name    : "player_name",
                *team_id        : "team_id",
                *team_abbr      : "team_abbreviation",
                *age            : "age",
                *games          : "gp",
                *wins           : "w",
                *losses         : "l",
                *mins           : "min",
                *fgm            : "fgm",
                *fga            : "fga",
                *fg3m           : "fg3m",
                *fg3a           : "fg3a",
                *ftm            : "ftm",
                *fta            : "fta",
                *o_boards       : "oreb",
                *d_boards       : "dreb",
                *boards         : "reb",
                *assists        : "ast",
                *turnovers      : "tov",
                *steals         : "stl",
                *blocks         : "blk",
                *block_against  : "blka",
                *fouls          : "pf",
                *fouls_drawn    : "pfd",
                *points         : "pts",
                *plus_minus     : "plus_minus",
                *double_double  : "dd2",
                *triple_double  : "td3"
                }
    per_player_advanced :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_filters
        api.results  :
            LeagueDashPlayerStats : &pp_advanced_results {
                *person_id       : "player_id",
                *player_name     : "player_name",
                *team_id         : "team_id",
                *team_abbr       : "team_abbreviation",
                *age             : "age",
                *games           : "gp",
                *wins            : "w",
                *losses          : "l",
                *mins            : "min",
                *o_rating        : "off_rating",
                *d_rating        : "def_rating",
                *net_rating      : "net_rating",
                *assist_percent  : "ast_pct",
                *assist_turnover : "ast_to",
                *assist_ratio    : "ast_ratio",
                *o_board_percent : "oreb_pct",
                *d_board_percent : "dreb_pct",
                *board_percent   : "reb_pct",
                *turnover_rate   : "tm_tov_pct",
                *efg_percent     : "efg_pct",
                *ts_percent      : "ts_pct",
                *usage_percent   : "usg_pct",
                *pace            : "pace",
                *pie             : "pie",
                }
    per_player_miscellaneous :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_filters
        api.results  :
            LeagueDashPlayerStats : &pp_misc_results {
                *person_id             : "player_id",
                *player_name           : "player_name",
                *team_id               : "team_id",
                *team_abbr             : "team_abbreviation",
                *age                   : "age",
                *games                 : "gp",
                *wins                  : "w",
                *losses                : "l",
                *mins                  : "min",
                *points_off_TO         : "pts_off_tov",
                *points_sec_chance     : "pts_2nd_chance",
                *points_fast_break     : "pts_fb",
                *points_in_paint       : "pts_paint",
                *opp_points_off_TO     : "opp_pts_off_tov",
                *opp_points_sec_chance : "opp_pts_2nd_chance",
                *opp_points_fast_break : "opp_pts_fb",
                *opp_points_in_paint   : "opp_pts_paint",
                *blocks                : "blk",
                *block_against         : "blka",
                *fouls                 : "pf",
                *fouls_drawn           : "pfd"
                }
    per_player_scoring :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_filters
        api.results  :
            LeagueDashPlayerStats : &pp_scoring_results {
                *person_id             : "player_id",
                *player_name           : "player_name",
                *team_id               : "team_id",
                *team_abbr             : "team_abbreviation",
                *age                   : "age",
                *games                 : "gp",
                *wins                  : "w",
                *losses                : "l",
                *mins                  : "min",
                *fg2a_percent          : "pct_fga_2pt",
                *fg3a_percent          : "pct_fga_3pt",
                *pts2_percent          : "pct_pts_2pt",
                *pts2_midrange_percent : "pct_pts_2pt_mr",
                *pts3_percent          : "pct_pts_3pt",
                *pts_fastbreak_percent : "pct_pts_fb",
                *pts_freethrow_percent : "pct_pts_ft",
                *pts_off_TO_percent    : "pct_pts_off_tov",
                *pts_paint_percent     : "pct_pts_paint",
                *pts2m_assist_percent  : "pct_ast_2pm",
                *pts3m_assist_percent  : "pct_ast_3pm",
                *fgm_assist_percent    : "pct_ast_fgm"
                }
    per_player_usage :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_filters
        api.results  :
            LeagueDashPlayerStats : &pp_usage_results {
                *person_id           : "player_id",
                *player_name         : "player_name",
                *team_id             : "team_id",
                *team_abbr           : "team_abbreviation",
                *age                 : "age",
                *games               : "gp",
                *wins                : "w",
                *losses              : "l",
                *mins                : "min",
                *usage_percent       : "usg_pct",
                *fgm_usage           : "pct_fgm",
                *fga_usage           : "pct_fga",
                *fg3m_usage          : "pct_fg3m",
                *fg3a_usage          : "pct_fg3a",
                *ftm_usage           : "pct_ftm",
                *fta_usage           : "pct_fta",
                *o_board_usage       : "pct_oreb",
                *d_board_usage       : "pct_dreb",
                *board_usage         : "pct_reb",
                *assist_usage        : "pct_ast",
                *TO_usage            : "pct_tov",
                *steal_usage         : "pct_stl",
                *block_usage         : "pct_blk",
                *block_against_usage : "pct_blka",
                *fouls_usage         : "pct_pf",
                *fouls_drawn_usage   : "pct_pfd",
                *points_usage        : "pct_pts"
                }
    per_player_base_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : &ldpc_filters {
            *clutch_time         : "ClutchTime",
            *college             : "College",
            *conference          : "Conference",
            *country             : "Country",
            *date_from           : "DateFrom",
            *date_to             : "DateTo",
            *division            : "Division",
            *draft_pick          : "DraftPick",
            *draft_year          : "DraftYear",
            *game_scope          : "GameScope",
            *game_segment        : "GameSegment",
            *height_segment      : "Height",
            *last_n              : "LastNGames",
            *lead                : "AheadBehind",
            *league              : "LeagueID",
            *location            : "Location",
            *measurement         : "MeasureType",
            *month               : "Month",
            *opponent_team       : "OpponentTeamID",
            *win_loss            : "Outcome",
            *playoff_round       : "PORound",
            *pace_adjust         : "PaceAdjust",
            *per                 : "PerMode",
            *period              : "Period",
            *point_diff          : "PointDiff",
            *experience          : "PlayerExperience",
            *position            : "PlayerPosition",
            *plus_minus          : "PlusMinus",
            *rank                : "Rank",
            *season              : "Season",
            *season_segment      : "SeasonSegment",
            *season_type         : "SeasonType",
            *shot_clock          : "ShotClockRange",
            *starting_status     : "StarterBench",
            *team_id             : "TeamID",
            *opponent_conference : "VsConference",
            *opponent_division   : "VsDivision",
            *weight_segment      : "Weight"
            }
        api.results :
            LeagueDashPlayerClutch : *pp_base_results
    per_player_advanced_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_filters
        api.results :
            LeagueDashPlayerClutch : *pp_advanced_results
    per_player_miscellaneous_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_filters
        api.results :
            LeagueDashPlayerClutch : *pp_misc_results
    per_player_scoring_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_filters
        api.results :
            LeagueDashPlayerClutch : *pp_scoring_results
    per_player_usage_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_filters
        api.results :
            LeagueDashPlayerClutch : *pp_usage_results
    player_bio :
        api.name     : "leaguedashplayerbiostats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : {
            *college             : "College",
            *conference          : "Conference",
            *country             : "Country",
            *date_from           : "DateFrom",
            *date_to             : "DateTo",
            *division            : "Division",
            *draft_pick          : "DraftPick",
            *draft_year          : "DraftYear",
            *game_scope          : "GameScope",
            *game_segment        : "GameSegment",
            *height_segment      : "Height",
            *last_n              : "LastNGames",
            *league              : "LeagueID",
            *location            : "Location",
            *month               : "Month",
            *opponent_team       : "OpponentTeamID",
            *win_loss            : "Outcome",
            *playoff_round       : "PORound",
            *per                 : "PerMode",
            *period              : "Period",
            *experience          : "PlayerExperience",
            *position            : "PlayerPosition",
            *season              : "Season",
            *season_segment      : "SeasonSegment",
            *season_type         : "SeasonType",
            *shot_clock          : "ShotClockRange",
            *starting_status     : "StarterBench",
            *team_id             : "TeamID",
            *opponent_conference : "VsConference",
            *opponent_division   : "VsDivision",
            *weight_segment      : "Weight"
            }
        api.results :
            LeagueDashPlayerBioStats : {
                *person_id       : "player_id",
                *player_name     : "player_name",
                *team_id         : "team_id",
                *team_abbr       : "team_abbreviation",
                *age             : "age",
                *height          : "player_height_inches",
                *weight          : "player_weight",
                *college         : "college",
                *country         : "country",
                *draft_year      : "draft_year",
                *draft_round     : "draft_round",
                *draft_number    : "draft_number",
                *games           : "gp",
                *points          : "pts",
                *boards          : "reb",
                *assists         : "ast",
                *net_rating      : "net_rating",
                *o_board_percent : "oreb_pct",
                *d_board_percent : "dreb_pct",
                *usage_percent   : "usg_pct",
                *ts_percent      : "ts_pct",
                *assist_percent  : "ast_pct"
                }
    player_game_log :
        api.name     : "leaguegamelog"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : &lgl_filters {
            *counter        : "Counter",
            *descending     : "Direction",
            *league         : "LeagueID",
            *player_or_team : "PlayerOrTeam",
            *season         : "Season",
            *season_type    : "SeasonType",
            *sorter         : "Sorter"
            }
        api.results :
            LeagueGameLog : {
                *game_season   : "season_id",
                *person_id     : "player_id",
                *player_name   : "player_name",
                *team_abbr     : "team_abbreviation",
                *team_name     : "team_name",
                *game_id       : "game_id",
                *game_date     : "game_date",
                *game_at_home  : "matchup",
                *game_outcome  : "wl",
                *mins          : "min",
                *fgm           : "fgm",
                *fga           : "fga",
                *fg3m          : "fg3m",
                *fg3a          : "fg3a",
                *ftm           : "ftm",
                *fta           : "fta",
                *o_boards      : "oreb",
                *d_boards      : "dreb",
                *boards        : "reb",
                *assists       : "ast",
                *steals        : "stl",
                *blocks        : "blk",
                *turnovers     : "tov",
                *fouls         : "pf",
                *points        : "pts",
                *plus_minus    : "plus_minus",
                *video         : "video_available"            
                }
    team_game_log :
        api.name     : "leaguegamelog"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *lgl_filters
        api.results :
            LeagueGameLog : {
                *game_season   : "season_id",
                *team_id       : "team_id",
                *team_abbr     : "team_abbreviation",
                *team_name     : "team_name",
                *game_id       : "game_id",
                *game_date     : "game_date",
                *game_at_home  : "matchup",
                *game_outcome  : "wl",
                *mins          : "min",
                *fgm           : "fgm",
                *fga           : "fga",
                *fg3m          : "fg3m",
                *fg3a          : "fg3a",
                *ftm           : "ftm",
                *fta           : "fta",
                *o_boards      : "oreb",
                *d_boards      : "dreb",
                *boards        : "reb",
                *assists       : "ast",
                *steals        : "stl",
                *blocks        : "blk",
                *turnovers     : "tov",
                *fouls         : "pf",
                *points        : "pts",
                *plus_minus    : "plus_minus",
                *video         : "video_available"
                }
    play_by_play :
        api.name     : "playbyplayv2"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/game/"
        api.filters  : &pbp_filters {
            *end_period   : "EndPeriod",
            *game_id      : "GameID",
            *start_period : "StartPeriod",
            }
        api.results :
            PlayByPlay : {
                *game_id          : "game_id",
                *event_num        : "eventnum",
                *event_msg_type   : "eventmsgtype",
                *event_msg_action : "eventmsgactiontype",
                *period           : "period",
                *world_clock      : "wctimestring",
                *game_clock       : "pctimestring",
                *home_msg         : "homedescription",
                *neutral_msg      : "neutraldescription",
                *visitor_msg      : "visitordescription",
                *visitor_score    : "score",
                *home_score       : "score",
                *person_type_1    : "person1type",
                *id_1             : "player1_id",
                *name_1           : "player1_name",
                *team_id_1        : "player1_team_id",
                *person_type_2    : "person2type",
                *id_2             : "player2_id",
                *name_2           : "player2_name",
                *team_id_2        : "player2_team_id",
                *person_type_3    : "person3type",
                *id_3             : "player3_id",
                *name_3           : "player3_name",
                *team_id_3        : "player3_team_id"
                }

# regex i'm using to assist after copy and paste from chromium          
#.*: "([A-Z0-9_]+)"
#                *\L\1 : "\L\1",

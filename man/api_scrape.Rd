% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scrape.R
\name{api_scrape}
\alias{api_scrape}
\title{Scrape stats.nba.com API and return statsnbaR data}
\usage{
api_scrape(endpoint, filters, method = NULL, ...)
}
\arguments{
\item{endpoint}{Character string which identifies the statsnbaR endpoint}

\item{filters}{Named list of statsnbaR key-value filters for the query}

\item{method}{Optional user-supplied function to retrieve JSON from 
stats.nba.com}
}
\value{
A list of data.frames of the resultSets returned by stats.nba.com
  with inferred data types.
}
\description{
Perform a query on a recognised endpoint of stats.nba.com, and
format the output as a data.frame with inferred data types for each
attribute based on statsnbaR's internal YAML specifications.
}
\details{
The endpoints, data types returned and filter specifications are given in the
internal YAML which is available on
\url{https://www.github.com/stephematician/statsnbaR/tree/master/data-raw/ADL.yaml}

The YAML specifies four main things, the;
\itemize{
  \item host (stats.nba.com);
  \item names of accepted filters and their mappings to stats.nba.com;
  \item result data conversion parameters (such as class or mapping); and
  \item the endpoint APIs, what filters they accept and what data they
  should return.
}

How the last three items are specified is briefly described in the following
sections.
}
\section{\sQuote{statsnbaR filters} YAML}{


\preformatted{
filters  :
    league :
        mapping : \{
            NBA      : "00",    # NBA
            D-league : "20"     # D-League
            \}
        default : NBA
}

This is hopefully fairly self-explanatory:
\itemize{
  \item The mapping is from values that statsnbaR uses internally such
    as \code{NBA}, to the value that stats.nba.com expects.
  \item Default values are specified for each filter.
}
}

\section{\sQuote{statsnbaR datatype} YAML}{


The desired properties of the returned data types and/or a way to
map them to desired types is specified in the YAML in a fashion similar
to the following example:

\preformatted{
data    :
    person_id :
        class   : numeric
  &active roster_status :
       class   : logical
       mapping : \{
           0 : FALSE,    # not active
           1 : TRUE      # active player
           \}
}

Things to note are:
\itemize{
  \item The class of the data-type will refer to a specific type
    converter from \code{\link{type_converters}}.
  \item THe mapping for a data type may not guarantee the correct
    type and so the type converter is employed after the mapping.
}
}

\section{End-point YAML}{


The endpoint defined in the YAML might look like

\preformatted{
endpoints :
    PlayerCommon :
        api.name     : "commonallplayers"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/players"
        api.filters  :
            league       : "LeagueID"
        api.results :
            CommonAllPlayers : \{
                person_id    : "person_id",
                \}
}

\itemize{
  \item The first three items under PlayerCommon are passed to
    \code{httr::GET}.
  \item The \code{api.filters} item is a mapping from filter names that
    statsnbaR uses internally to filter names that the stats.nba.com
    endpoint uses.
  \item The \code{api.results} item maps the attribute names of the data
    returned by stats.nba.com to names that statsnbaR uses internally.
    see the section \sQuote{Data specification YAML}.
}
}

